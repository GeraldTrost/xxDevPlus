using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ndString
{
 public class Delete : RchOp
 {
  //Copyright© 1996-2012 Gerald Trost, Klagenfurt, AUSTRIA. No warranties or liabilities whatsoever, not with third parties, You may use, modify, distribute this code under GNU public licence for NON-Commercial use as long as this notice remains unchanged.
  private static bool selfTested  = false;  private static string ass(bool expr) { if (!expr) throw new Exception(ass(true) + " SelfTest Failure"); return "RchOp"; } private static void selfTest() { selfTested = true; } private void init() { if (!selfTested) selfTest(); }

  private bool   pure;
  internal Delete(bool bufop, Reach Base)             { this.bufop = bufop; this.Base = Base; pure = true; }
  internal Delete(bool bufop, Reach Base, int cnt)    { this.bufop = bufop; this.Base = Base; this.cnt = cnt; pure = false; }

// ******************* (Rch other)
  public Reach before      (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Reach) Base.delbefore_     (other)              : (Reach) Base.delbefore      (other)              : (bufop) ? (Reach) Base.delbefore_     (other, this)              : (Reach) Base.delbefore      (other, this); }
  public Reach upto        (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Reach) Base.delupto_       (other)              : (Reach) Base.delupto        (other)              : (bufop) ? (Reach) Base.delupto_       (other, this)              : (Reach) Base.delupto        (other, this); }
  public Reach at          (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Reach) Base.delat_         (other)              : (Reach) Base.delat          (other)              : (bufop) ? (Reach) Base.delat_         (other, this)              : (Reach) Base.delat          (other, this); }
  public Reach from        (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Reach) Base.delfrom_       (other)              : (Reach) Base.delfrom        (other)              : (bufop) ? (Reach) Base.delfrom_       (other, this)              : (Reach) Base.delfrom        (other, this); }
  public Reach after       (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Reach) Base.delafter_      (other)              : (Reach) Base.delafter       (other)              : (bufop) ? (Reach) Base.delafter_      (other, this)              : (Reach) Base.delafter       (other, this); }
// ******************* (int pos) //supported: backward index (eInx < 0) where -1 == last Element
  public Reach before      (int  pos)                                          { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (pos)                : (Reach) Base.delbefore      (pos)                : (bufop) ? (Reach) Base.delbefore_     (pos, this)                : (Reach) Base.delbefore      (pos, this); }
  public Reach upto        (int  pos)                                          { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (pos)                : (Reach) Base.delupto        (pos)                : (bufop) ? (Reach) Base.delupto_       (pos, this)                : (Reach) Base.delupto        (pos, this); }
  public Reach at          (int  pos)                                          { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (pos)                : (Reach) Base.delat          (pos)                : (bufop) ? (Reach) Base.delat_         (pos, this)                : (Reach) Base.delat          (pos, this); }
  public Reach from        (int  pos)                                          { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (pos)                : (Reach) Base.delfrom        (pos)                : (bufop) ? (Reach) Base.delfrom_       (pos, this)                : (Reach) Base.delfrom        (pos, this); }
  public Reach after       (int  pos)                                          { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (pos)                : (Reach) Base.delafter       (pos)                : (bufop) ? (Reach) Base.delafter_      (pos, this)                : (Reach) Base.delafter       (pos, this); }
// ******************* (bool match, int occur, String chrs)
  public Reach before      (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (match, occur, chrs) : (Reach) Base.delbefore      (match, occur, chrs) : (bufop) ? (Reach) Base.delbefore_     (match, occur, chrs, this) : (Reach) Base.delbefore      (match, occur, chrs, this); }
  public Reach upto        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (match, occur, chrs) : (Reach) Base.delupto        (match, occur, chrs) : (bufop) ? (Reach) Base.delupto_       (match, occur, chrs, this) : (Reach) Base.delupto        (match, occur, chrs, this); }
  public Reach at          (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (match, occur, chrs) : (Reach) Base.delat          (match, occur, chrs) : (bufop) ? (Reach) Base.delat_         (match, occur, chrs, this) : (Reach) Base.delat          (match, occur, chrs, this); }
  public Reach from        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (match, occur, chrs) : (Reach) Base.delfrom        (match, occur, chrs) : (bufop) ? (Reach) Base.delfrom_       (match, occur, chrs, this) : (Reach) Base.delfrom        (match, occur, chrs, this); }
  public Reach after       (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (match, occur, chrs) : (Reach) Base.delafter       (match, occur, chrs) : (bufop) ? (Reach) Base.delafter_      (match, occur, chrs, this) : (Reach) Base.delafter       (match, occur, chrs, this); }
/*
  public Reach before      (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (match, 1, chrs)     : (Reach) Base.delbefore      (match, 1, chrs)     : (bufop) ? (Reach) Base.delbefore_     (match, 1, chrs, this)     : (Reach) Base.delbefore      (match, 1, chrs, this); }
  public Reach upto        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (match, 1, chrs)     : (Reach) Base.delupto        (match, 1, chrs)     : (bufop) ? (Reach) Base.delupto_       (match, 1, chrs, this)     : (Reach) Base.delupto        (match, 1, chrs, this); }
  public Reach at          (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (match, 1, chrs)     : (Reach) Base.delat          (match, 1, chrs)     : (bufop) ? (Reach) Base.delat_         (match, 1, chrs, this)     : (Reach) Base.delat          (match, 1, chrs, this); }
  public Reach from        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (match, 1, chrs)     : (Reach) Base.delfrom        (match, 1, chrs)     : (bufop) ? (Reach) Base.delfrom_       (match, 1, chrs, this)     : (Reach) Base.delfrom        (match, 1, chrs, this); }
  public Reach after       (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (match, 1, chrs)     : (Reach) Base.delafter       (match, 1, chrs)     : (bufop) ? (Reach) Base.delafter_      (match, 1, chrs, this)     : (Reach) Base.delafter       (match, 1, chrs, this); }
*/
// ******************* (bool match, int occur, String chrs)
  public Reach Before      (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (match, occur, chrs) : (Reach) Base.delBefore      (match, occur, chrs) : (bufop) ? (Reach) Base.delBefore_     (match, occur, chrs, this) : (Reach) Base.delBefore      (match, occur, chrs, this); }
  public Reach Upto        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (match, occur, chrs) : (Reach) Base.delUpto        (match, occur, chrs) : (bufop) ? (Reach) Base.delUpto_       (match, occur, chrs, this) : (Reach) Base.delUpto        (match, occur, chrs, this); }
  public Reach At          (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (match, occur, chrs) : (Reach) Base.delAt          (match, occur, chrs) : (bufop) ? (Reach) Base.delAt_         (match, occur, chrs, this) : (Reach) Base.delAt          (match, occur, chrs, this); }
  public Reach From        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (match, occur, chrs) : (Reach) Base.delFrom        (match, occur, chrs) : (bufop) ? (Reach) Base.delFrom_       (match, occur, chrs, this) : (Reach) Base.delFrom        (match, occur, chrs, this); }
  public Reach After       (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (match, occur, chrs) : (Reach) Base.delAfter       (match, occur, chrs) : (bufop) ? (Reach) Base.delAfter_      (match, occur, chrs, this) : (Reach) Base.delAfter       (match, occur, chrs, this); }
/*                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (match, 1, chrs)     : (Reach) Base.delBefore      (match, 1, chrs)     : (bufop) ? (Reach) Base.delBefore_     (match, 1, chrs, this)     : (Reach) Base.delBefore      (match, 1, chrs, this); }
  public Reach Upto        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (match, 1, chrs)     : (Reach) Base.delUpto        (match, 1, chrs)     : (bufop) ? (Reach) Base.delUpto_       (match, 1, chrs, this)     : (Reach) Base.delUpto        (match, 1, chrs, this); }
  public Reach At          (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (match, 1, chrs)     : (Reach) Base.delAt          (match, 1, chrs)     : (bufop) ? (Reach) Base.delAt_         (match, 1, chrs, this)     : (Reach) Base.delAt          (match, 1, chrs, this); }
  public Reach From        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (match, 1, chrs)     : (Reach) Base.delFrom        (match, 1, chrs)     : (bufop) ? (Reach) Base.delFrom_       (match, 1, chrs, this)     : (Reach) Base.delFrom        (match, 1, chrs, this); }
  public Reach After       (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (match, 1, chrs)     : (Reach) Base.delAfter       (match, 1, chrs)     : (bufop) ? (Reach) Base.delAfter_      (match, 1, chrs, this)     : (Reach) Base.delAfter       (match, 1, chrs, this); }
*/                                                                                                                                                                                                                                                                                                                                                                                                                  //
// ******************* (int occur, String token)
  public Reach before      (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (occur, token)       : (Reach) Base.delbefore      (occur, token)       : (bufop) ? (Reach) Base.delbefore_     (this, occur, token)       : (Reach) Base.delbefore      (this, occur, token); }
  public Reach upto        (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (occur, token)       : (Reach) Base.delupto        (occur, token)       : (bufop) ? (Reach) Base.delupto_       (this, occur, token)       : (Reach) Base.delupto        (this, occur, token); }
  public Reach at          (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (occur, token)       : (Reach) Base.delat          (occur, token)       : (bufop) ? (Reach) Base.delat_         (this, occur, token)       : (Reach) Base.delat          (this, occur, token); }
  public Reach from        (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (occur, token)       : (Reach) Base.delfrom        (occur, token)       : (bufop) ? (Reach) Base.delfrom_       (this, occur, token)       : (Reach) Base.delfrom        (this, occur, token); }
  public Reach after       (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (occur, token)       : (Reach) Base.delafter       (occur, token)       : (bufop) ? (Reach) Base.delafter_      (this, occur, token)       : (Reach) Base.delafter       (this, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach before      (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (1, token)           : (Reach) Base.delbefore      (1, token)           : (bufop) ? (Reach) Base.delbefore_     (this, 1, token)           : (Reach) Base.delbefore      (this, 1, token); }
  public Reach upto        (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (1, token)           : (Reach) Base.delupto        (1, token)           : (bufop) ? (Reach) Base.delupto_       (this, 1, token)           : (Reach) Base.delupto        (this, 1, token); }
  public Reach at          (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (1, token)           : (Reach) Base.delat          (1, token)           : (bufop) ? (Reach) Base.delat_         (this, 1, token)           : (Reach) Base.delat          (this, 1, token); }
  public Reach from        (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (1, token)           : (Reach) Base.delfrom        (1, token)           : (bufop) ? (Reach) Base.delfrom_       (this, 1, token)           : (Reach) Base.delfrom        (this, 1, token); }
  public Reach after       (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (1, token)           : (Reach) Base.delafter       (1, token)           : (bufop) ? (Reach) Base.delafter_      (this, 1, token)           : (Reach) Base.delafter       (this, 1, token); }
// ******************* (int occur, String token )
  public Reach Before      (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (occur, token)       : (Reach) Base.delBefore      (occur, token)       : (bufop) ? (Reach) Base.delBefore_     (this, occur, token)       : (Reach) Base.delBefore      (this, occur, token); }
  public Reach Upto        (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (occur, token)       : (Reach) Base.delUpto        (occur, token)       : (bufop) ? (Reach) Base.delUpto_       (this, occur, token)       : (Reach) Base.delUpto        (this, occur, token); }
  public Reach At          (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (occur, token)       : (Reach) Base.delAt          (occur, token)       : (bufop) ? (Reach) Base.delAt_         (this, occur, token)       : (Reach) Base.delAt          (this, occur, token); }
  public Reach From        (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (occur, token)       : (Reach) Base.delFrom        (occur, token)       : (bufop) ? (Reach) Base.delFrom_       (this, occur, token)       : (Reach) Base.delFrom        (this, occur, token); }
  public Reach After       (long occur,             string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (occur, token)       : (Reach) Base.delAfter       (occur, token)       : (bufop) ? (Reach) Base.delAfter_      (this, occur, token)       : (Reach) Base.delAfter       (this, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (1, token)           : (Reach) Base.delBefore      (1, token)           : (bufop) ? (Reach) Base.delBefore_     (this, 1, token)           : (Reach) Base.delBefore      (this, 1, token); }
  public Reach Upto        (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (1, token)           : (Reach) Base.delUpto        (1, token)           : (bufop) ? (Reach) Base.delUpto_       (this, 1, token)           : (Reach) Base.delUpto        (this, 1, token); }
  public Reach At          (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (1, token)           : (Reach) Base.delAt          (1, token)           : (bufop) ? (Reach) Base.delAt_         (this, 1, token)           : (Reach) Base.delAt          (this, 1, token); }
  public Reach From        (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (1, token)           : (Reach) Base.delFrom        (1, token)           : (bufop) ? (Reach) Base.delFrom_       (this, 1, token)           : (Reach) Base.delFrom        (this, 1, token); }
  public Reach After       (                        string token)              { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (1, token)           : (Reach) Base.delAfter       (1, token)           : (bufop) ? (Reach) Base.delAfter_      (this, 1, token)           : (Reach) Base.delAfter       (this, 1, token); }
// ******************* (int occur, bool prio, String... tokens)
  public Reach before      (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (occur, prio, tokens)      : (Reach) Base.delbefore      (occur, prio, tokens)      : (bufop) ? (Reach) Base.delbefore_     (this, occur, prio, tokens)      : (Reach) Base.delbefore      (this, occur, prio, tokens); }
  public Reach upto        (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (occur, prio, tokens)      : (Reach) Base.delupto        (occur, prio, tokens)      : (bufop) ? (Reach) Base.delupto_       (this, occur, prio, tokens)      : (Reach) Base.delupto        (this, occur, prio, tokens); }
  public Reach at          (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (occur, prio, tokens)      : (Reach) Base.delat          (occur, prio, tokens)      : (bufop) ? (Reach) Base.delat_         (this, occur, prio, tokens)      : (Reach) Base.delat          (this, occur, prio, tokens); }
  public Reach from        (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (occur, prio, tokens)      : (Reach) Base.delfrom        (occur, prio, tokens)      : (bufop) ? (Reach) Base.delfrom_       (this, occur, prio, tokens)      : (Reach) Base.delfrom        (this, occur, prio, tokens); }
  public Reach after       (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (occur, prio, tokens)      : (Reach) Base.delafter       (occur, prio, tokens)      : (bufop) ? (Reach) Base.delafter_      (this, occur, prio, tokens)      : (Reach) Base.delafter       (this, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach before      (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delbefore_     (1, prio, tokens)          : (Reach) Base.delbefore      (1, prio, tokens)          : (bufop) ? (Reach) Base.delbefore_     (this, 1, prio, tokens)          : (Reach) Base.delbefore      (this, 1, prio, tokens); }
  public Reach upto        (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delupto_       (1, prio, tokens)          : (Reach) Base.delupto        (1, prio, tokens)          : (bufop) ? (Reach) Base.delupto_       (this, 1, prio, tokens)          : (Reach) Base.delupto        (this, 1, prio, tokens); }
  public Reach at          (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delat_         (1, prio, tokens)          : (Reach) Base.delat          (1, prio, tokens)          : (bufop) ? (Reach) Base.delat_         (this, 1, prio, tokens)          : (Reach) Base.delat          (this, 1, prio, tokens); }
  public Reach from        (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delfrom_       (1, prio, tokens)          : (Reach) Base.delfrom        (1, prio, tokens)          : (bufop) ? (Reach) Base.delfrom_       (this, 1, prio, tokens)          : (Reach) Base.delfrom        (this, 1, prio, tokens); }
  public Reach after       (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delafter_      (1, prio, tokens)          : (Reach) Base.delafter       (1, prio, tokens)          : (bufop) ? (Reach) Base.delafter_      (this, 1, prio, tokens)          : (Reach) Base.delafter       (this, 1, prio, tokens); }
// ******************* (int occur, bool prio, String... tokens)
  public Reach Before      (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (occur, prio, tokens)      : (Reach) Base.delBefore      (occur, prio, tokens)      : (bufop) ? (Reach) Base.delBefore_     (this, occur, prio, tokens)      : (Reach) Base.delBefore      (this, occur, prio, tokens); }
  public Reach Upto        (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (occur, prio, tokens)      : (Reach) Base.delUpto        (occur, prio, tokens)      : (bufop) ? (Reach) Base.delUpto_       (this, occur, prio, tokens)      : (Reach) Base.delUpto        (this, occur, prio, tokens); }
  public Reach At          (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (occur, prio, tokens)      : (Reach) Base.delAt          (occur, prio, tokens)      : (bufop) ? (Reach) Base.delAt_         (this, occur, prio, tokens)      : (Reach) Base.delAt          (this, occur, prio, tokens); }
  public Reach From        (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (occur, prio, tokens)      : (Reach) Base.delFrom        (occur, prio, tokens)      : (bufop) ? (Reach) Base.delFrom_       (this, occur, prio, tokens)      : (Reach) Base.delFrom        (this, occur, prio, tokens); }
  public Reach After       (long occur, bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (occur, prio, tokens)      : (Reach) Base.delAfter       (occur, prio, tokens)      : (bufop) ? (Reach) Base.delAfter_      (this, occur, prio, tokens)      : (Reach) Base.delAfter       (this, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delBefore_     (1, prio, tokens)          : (Reach) Base.delBefore      (1, prio, tokens)          : (bufop) ? (Reach) Base.delBefore_     (this, 1, prio, tokens)          : (Reach) Base.delBefore      (this, 1, prio, tokens); }
  public Reach Upto        (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delUpto_       (1, prio, tokens)          : (Reach) Base.delUpto        (1, prio, tokens)          : (bufop) ? (Reach) Base.delUpto_       (this, 1, prio, tokens)          : (Reach) Base.delUpto        (this, 1, prio, tokens); }
  public Reach At          (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAt_         (1, prio, tokens)          : (Reach) Base.delAt          (1, prio, tokens)          : (bufop) ? (Reach) Base.delAt_         (this, 1, prio, tokens)          : (Reach) Base.delAt          (this, 1, prio, tokens); }
  public Reach From        (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delFrom_       (1, prio, tokens)          : (Reach) Base.delFrom        (1, prio, tokens)          : (bufop) ? (Reach) Base.delFrom_       (this, 1, prio, tokens)          : (Reach) Base.delFrom        (this, 1, prio, tokens); }
  public Reach After       (            bool prio, params string[] tokens)                { Base.upd();              return (pure) ? (bufop) ? (Reach) Base.delAfter_      (1, prio, tokens)          : (Reach) Base.delAfter       (1, prio, tokens)          : (bufop) ? (Reach) Base.delAfter_      (this, 1, prio, tokens)          : (Reach) Base.delAfter       (this, 1, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
 }




}














