using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ndString
{
 public class ReplaceWith : RchOp
 {
  //Copyright© 1996-2012 Gerald Trost, Klagenfurt, AUSTRIA. No warranties or liabilities whatsoever, not with third parties, You may use, modify, distribute this code under GNU public licence for NON-Commercial use as long as this notice remains unchanged.
  private static bool selfTested  = false;  private static string ass(bool expr) { if (!expr) throw new Exception(ass(true) + " SelfTest Failure"); return "ReplaceWith"; } private static void selfTest() { selfTested = true; } private void init() { if (!selfTested) selfTest(); }
 
  private bool pure;

  internal ReplaceWith(bool bufop, Reach Base, string txt) { this.bufop = bufop; this.Base = Base; sTxt = txt; pure = true; }
  internal ReplaceWith(bool bufop, Reach Base, Reach txt) { this.bufop = bufop; this.Base = Base; rTxt = txt; pure = false; rTxt.upd(); }
// ******************* (Rch other)
  public Reach before      (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop)? (Reach) Base.rplbefore_     (other, this)              : (Reach) Base.rplbefore      (other, this)              : (bufop) ? (Reach) Base.rplbefore     (other, (Rch) rTxt)              : (Reach) Base.rplbefore      (other, (Rch) rTxt); }
  public Reach upto        (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop)? (Reach) Base.rplupto_       (other, this)              : (Reach) Base.rplupto        (other, this)              : (bufop) ? (Reach) Base.rplupto       (other, (Rch) rTxt)              : (Reach) Base.rplupto        (other, (Rch) rTxt); }
  public Reach at          (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop)? (Reach) Base.rplat_         (other, this)              : (Reach) Base.rplat          (other, this)              : (bufop) ? (Reach) Base.rplat         (other, (Rch) rTxt)              : (Reach) Base.rplat          (other, (Rch) rTxt); }
  public Reach from        (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop)? (Reach) Base.rplfrom_       (other, this)              : (Reach) Base.rplfrom        (other, this)              : (bufop) ? (Reach) Base.rplfrom       (other, (Rch) rTxt)              : (Reach) Base.rplfrom        (other, (Rch) rTxt); }
  public Reach after       (Reach other)                                      { Base.upd(); other.upd(); return (pure) ? (bufop)? (Reach) Base.rplafter_      (other, this)              : (Reach) Base.rplafter       (other, this)              : (bufop) ? (Reach) Base.rplafter      (other, (Rch) rTxt)              : (Reach) Base.rplafter       (other, (Rch) rTxt); }
// ******************* (int pos) //supported: backward index (eInx < 0) where -1 == last Element
  public Reach before      (int  pos)                                          { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (pos, this)                : (Reach) Base.rplbefore      (pos, this)                : (bufop) ? (Reach) Base.rplbefore     (pos, (Rch) rTxt)                : (Reach) Base.rplbefore      (pos, (Rch) rTxt); }
  public Reach upto        (int  pos)                                          { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (pos, this)                : (Reach) Base.rplupto        (pos, this)                : (bufop) ? (Reach) Base.rplupto       (pos, (Rch) rTxt)                : (Reach) Base.rplupto        (pos, (Rch) rTxt); }
  public Reach at          (int  pos)                                          { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (pos, this)                : (Reach) Base.rplat          (pos, this)                : (bufop) ? (Reach) Base.rplat         (pos, (Rch) rTxt)                : (Reach) Base.rplat          (pos, (Rch) rTxt); }
  public Reach from        (int  pos)                                          { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (pos, this)                : (Reach) Base.rplfrom        (pos, this)                : (bufop) ? (Reach) Base.rplfrom       (pos, (Rch) rTxt)                : (Reach) Base.rplfrom        (pos, (Rch) rTxt); }
  public Reach after       (int  pos)                                          { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (pos, this)                : (Reach) Base.rplafter       (pos, this)                : (bufop) ? (Reach) Base.rplafter      (pos, (Rch) rTxt)                : (Reach) Base.rplafter       (pos, (Rch) rTxt); }
  // ******************* (bool match, int occur, String chrs)
  public Reach before      (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (match, occur, chrs, this) : (Reach) Base.rplbefore      (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplbefore     (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplbefore      (match, occur, chrs, (Rch) rTxt); }
  public Reach upto        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (match, occur, chrs, this) : (Reach) Base.rplupto        (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplupto       (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplupto        (match, occur, chrs, (Rch) rTxt); }
  public Reach at          (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (match, occur, chrs, this) : (Reach) Base.rplat          (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplat         (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplat          (match, occur, chrs, (Rch) rTxt); }
  public Reach from        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (match, occur, chrs, this) : (Reach) Base.rplfrom        (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplfrom       (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplfrom        (match, occur, chrs, (Rch) rTxt); }
  public Reach after       (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (match, occur, chrs, this) : (Reach) Base.rplafter       (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplafter      (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplafter       (match, occur, chrs, (Rch) rTxt); }
/*                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach before      (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (match, 1, chrs, this)     : (Reach) Base.rplbefore      (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplbefore     (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplbefore      (match, 1, chrs, (Rch) rTxt); }
  public Reach upto        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (match, 1, chrs, this)     : (Reach) Base.rplupto        (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplupto       (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplupto        (match, 1, chrs, (Rch) rTxt); }
  public Reach at          (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (match, 1, chrs, this)     : (Reach) Base.rplat          (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplat         (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplat          (match, 1, chrs, (Rch) rTxt); }
  public Reach from        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (match, 1, chrs, this)     : (Reach) Base.rplfrom        (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplfrom       (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplfrom        (match, 1, chrs, (Rch) rTxt); }
  public Reach after       (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (match, 1, chrs, this)     : (Reach) Base.rplafter       (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplafter      (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplafter       (match, 1, chrs, (Rch) rTxt); }
*/                                                                                                                                                                                                                                                                                                                                                                                                                  //
// ******************* (bool match, int occur, String chrs)
  public Reach Before      (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_     (match, occur, chrs, this) : (Reach) Base.rplBefore      (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplBefore     (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplBefore      (match, occur, chrs, (Rch) rTxt); }
  public Reach Upto        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_       (match, occur, chrs, this) : (Reach) Base.rplUpto        (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplUpto       (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplUpto        (match, occur, chrs, (Rch) rTxt); }
  public Reach At          (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_         (match, occur, chrs, this) : (Reach) Base.rplAt          (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplAt         (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplAt          (match, occur, chrs, (Rch) rTxt); }
  public Reach From        (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_       (match, occur, chrs, this) : (Reach) Base.rplFrom        (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplFrom       (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplFrom        (match, occur, chrs, (Rch) rTxt); }
  public Reach After       (bool match, long occur, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_      (match, occur, chrs, this) : (Reach) Base.rplAfter       (match, occur, chrs, this) : (bufop) ? (Reach) Base.rplAfter      (match, occur, chrs, (Rch) rTxt) : (Reach) Base.rplAfter       (match, occur, chrs, (Rch) rTxt); }
/*                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_     (match, 1, chrs, this)     : (Reach) Base.rplBefore      (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplBefore     (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplBefore      (match, 1, chrs, (Rch) rTxt); }
  public Reach Upto        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_       (match, 1, chrs, this)     : (Reach) Base.rplUpto        (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplUpto       (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplUpto        (match, 1, chrs, (Rch) rTxt); }
  public Reach At          (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_         (match, 1, chrs, this)     : (Reach) Base.rplAt          (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplAt         (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplAt          (match, 1, chrs, (Rch) rTxt); }
  public Reach From        (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_       (match, 1, chrs, this)     : (Reach) Base.rplFrom        (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplFrom       (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplFrom        (match, 1, chrs, (Rch) rTxt); }
  public Reach After       (            bool match, string chrs)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_      (match, 1, chrs, this)     : (Reach) Base.rplAfter       (match, 1, chrs, this)     : (bufop) ? (Reach) Base.rplAfter      (match, 1, chrs, (Rch) rTxt)     : (Reach) Base.rplAfter       (match, 1, chrs, (Rch) rTxt); }
*/                                                                                                                                                                                                                                                                                                                                                                                                                  //
// ******************* (int occur, String token)
  public Reach before      (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (this, occur, token)      : (Reach) Base.rplbefore      (this, occur, token)      : (bufop) ? (Reach) Base.rplbefore     ((Rch) rTxt, occur, token)      : (Reach) Base.rplbefore      ((Rch) rTxt, occur, token); }
  public Reach upto        (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (this, occur, token)      : (Reach) Base.rplupto        (this, occur, token)      : (bufop) ? (Reach) Base.rplupto       ((Rch) rTxt, occur, token)      : (Reach) Base.rplupto        ((Rch) rTxt, occur, token); }
  public Reach at          (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (this, occur, token)      : (Reach) Base.rplat          (this, occur, token)      : (bufop) ? (Reach) Base.rplat         ((Rch) rTxt, occur, token)      : (Reach) Base.rplat          ((Rch) rTxt, occur, token); }
  public Reach from        (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (this, occur, token)      : (Reach) Base.rplfrom        (this, occur, token)      : (bufop) ? (Reach) Base.rplfrom       ((Rch) rTxt, occur, token)      : (Reach) Base.rplfrom        ((Rch) rTxt, occur, token); }
  public Reach after       (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (this, occur, token)      : (Reach) Base.rplafter       (this, occur, token)      : (bufop) ? (Reach) Base.rplafter      ((Rch) rTxt, occur, token)      : (Reach) Base.rplafter       ((Rch) rTxt, occur, token); }
//
  public Reach before      (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (this, 1, token)          : (Reach) Base.rplbefore      (this, 1, token)          : (bufop) ? (Reach) Base.rplbefore     ((Rch) rTxt, 1, token)          : (Reach) Base.rplbefore      ((Rch) rTxt, 1, token); }
  public Reach upto        (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (this, 1, token)          : (Reach) Base.rplupto        (this, 1, token)          : (bufop) ? (Reach) Base.rplupto       ((Rch) rTxt, 1, token)          : (Reach) Base.rplupto        ((Rch) rTxt, 1, token); }
  public Reach at          (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (this, 1, token)          : (Reach) Base.rplat          (this, 1, token)          : (bufop) ? (Reach) Base.rplat         ((Rch) rTxt, 1, token)          : (Reach) Base.rplat          ((Rch) rTxt, 1, token); }
  public Reach from        (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (this, 1, token)          : (Reach) Base.rplfrom        (this, 1, token)          : (bufop) ? (Reach) Base.rplfrom       ((Rch) rTxt, 1, token)          : (Reach) Base.rplfrom        ((Rch) rTxt, 1, token); }
  public Reach after       (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (this, 1, token)          : (Reach) Base.rplafter       (this, 1, token)          : (bufop) ? (Reach) Base.rplafter      ((Rch) rTxt, 1, token)          : (Reach) Base.rplafter       ((Rch) rTxt, 1, token); }
// ******************* (int occur, String token)
  public Reach Before      (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_     (this, occur, token)      : (Reach) Base.rplBefore      (this, occur, token)      : (bufop) ? (Reach) Base.rplBefore     ((Rch) rTxt, occur, token)      : (Reach) Base.rplBefore      ((Rch) rTxt, occur, token); }
  public Reach Upto        (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_       (this, occur, token)      : (Reach) Base.rplUpto        (this, occur, token)      : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, occur, token)      : (Reach) Base.rplUpto        ((Rch) rTxt, occur, token); }
  public Reach At          (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_         (this, occur, token)      : (Reach) Base.rplAt          (this, occur, token)      : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, occur, token)      : (Reach) Base.rplAt          ((Rch) rTxt, occur, token); }
  public Reach From        (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_       (this, occur, token)      : (Reach) Base.rplFrom        (this, occur, token)      : (bufop) ? (Reach) Base.rplFrom       ((Rch) rTxt, occur, token)      : (Reach) Base.rplFrom        ((Rch) rTxt, occur, token); }
  public Reach After       (long occur,             string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_      (this, occur, token)      : (Reach) Base.rplAfter       (this, occur, token)      : (bufop) ? (Reach) Base.rplAfter      ((Rch) rTxt, occur, token)      : (Reach) Base.rplAfter       ((Rch) rTxt, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_    (this, 1, token)           : (Reach) Base.rplBefore      (this, 1, token)          : (bufop) ? (Reach) Base.rplBefore     ((Rch) rTxt, 1, token)          : (Reach) Base.rplBefore      ((Rch) rTxt, 1, token); }
  public Reach Upto        (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_      (this, 1, token)           : (Reach) Base.rplUpto        (this, 1, token)          : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, 1, token)          : (Reach) Base.rplUpto        ((Rch) rTxt, 1, token); }
  public Reach At          (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_        (this, 1, token)           : (Reach) Base.rplAt          (this, 1, token)          : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, 1, token)          : (Reach) Base.rplAt          ((Rch) rTxt, 1, token); }
  public Reach From        (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_      (this, 1, token)           : (Reach) Base.rplFrom        (this, 1, token)          : (bufop) ? (Reach) Base.rplFrom       ((Rch) rTxt, 1, token)          : (Reach) Base.rplFrom        ((Rch) rTxt, 1, token); }
  public Reach After       (                        string token)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_     (this, 1, token)           : (Reach) Base.rplAfter       (this, 1, token)          : (bufop) ? (Reach) Base.rplAfter      ((Rch) rTxt, 1, token)          : (Reach) Base.rplAfter       ((Rch) rTxt, 1, token); }
// ******************* (int occur, bool prio, String... tokens)
  public Reach before      (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (this, occur, prio, tokens)      : (Reach) Base.rplbefore      (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplbefore     ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplbefore      ((Rch) rTxt, occur, prio, tokens); }
  public Reach upto        (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (this, occur, prio, tokens)      : (Reach) Base.rplupto        (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplupto       ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplupto        ((Rch) rTxt, occur, prio, tokens); }
  public Reach at          (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (this, occur, prio, tokens)      : (Reach) Base.rplat          (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplat         ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplat          ((Rch) rTxt, occur, prio, tokens); }
  public Reach from        (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (this, occur, prio, tokens)      : (Reach) Base.rplfrom        (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplfrom       ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplfrom        ((Rch) rTxt, occur, prio, tokens); }
  public Reach after       (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (this, occur, prio, tokens)      : (Reach) Base.rplafter       (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplafter      ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplafter       ((Rch) rTxt, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach before      (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplbefore_     (this, 1, prio, tokens)          : (Reach) Base.rplbefore      (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplbefore     ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplbefore      ((Rch) rTxt, 1, prio, tokens); }
  public Reach upto        (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplupto_       (this, 1, prio, tokens)          : (Reach) Base.rplupto        (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplupto       ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplupto        ((Rch) rTxt, 1, prio, tokens); }
  public Reach at          (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplat_         (this, 1, prio, tokens)          : (Reach) Base.rplat          (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplat         ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplat          ((Rch) rTxt, 1, prio, tokens); }
  public Reach from        (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplfrom_       (this, 1, prio, tokens)          : (Reach) Base.rplfrom        (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplfrom       ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplfrom        ((Rch) rTxt, 1, prio, tokens); }
  public Reach after       (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplafter_      (this, 1, prio, tokens)          : (Reach) Base.rplafter       (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplafter      ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplafter       ((Rch) rTxt, 1, prio, tokens); }
// ******************* (int occur, bool prio, String... tokens)
  public Reach Before      (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_     (this, occur, prio, tokens)      : (Reach) Base.rplBefore      (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplBefore     ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplBefore      ((Rch) rTxt, occur, prio, tokens); }
  public Reach Upto        (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_       (this, occur, prio, tokens)      : (Reach) Base.rplUpto        (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplUpto        ((Rch) rTxt, occur, prio, tokens); }
  public Reach At          (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_         (this, occur, prio, tokens)      : (Reach) Base.rplAt          (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplAt          ((Rch) rTxt, occur, prio, tokens); }
  public Reach From        (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_       (this, occur, prio, tokens)      : (Reach) Base.rplFrom        (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplFrom       ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplFrom        ((Rch) rTxt, occur, prio, tokens); }
  public Reach After       (long occur,  bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_      (this, occur, prio, tokens)      : (Reach) Base.rplAfter       (this, occur, prio, tokens)      : (bufop) ? (Reach) Base.rplAfter      ((Rch) rTxt, occur, prio, tokens)      : (Reach) Base.rplAfter       ((Rch) rTxt, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                  //
  public Reach Before      (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplBefore_    (this, 1, prio, tokens)           : (Reach) Base.rplBefore      (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplBefore     ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplBefore      ((Rch) rTxt, 1, prio, tokens); }
  public Reach Upto        (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplUpto_      (this, 1, prio, tokens)           : (Reach) Base.rplUpto        (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplUpto        ((Rch) rTxt, 1, prio, tokens); }
  public Reach At          (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAt_        (this, 1, prio, tokens)           : (Reach) Base.rplAt          (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplUpto       ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplAt          ((Rch) rTxt, 1, prio, tokens); }
  public Reach From        (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplFrom_      (this, 1, prio, tokens)           : (Reach) Base.rplFrom        (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplFrom       ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplFrom        ((Rch) rTxt, 1, prio, tokens); }
  public Reach After       (             bool prio, params string[] tokens)               { Base.upd();              return (pure) ? (bufop)? (Reach) Base.rplAfter_     (this, 1, prio, tokens)           : (Reach) Base.rplAfter       (this, 1, prio, tokens)          : (bufop) ? (Reach) Base.rplAfter      ((Rch) rTxt, 1, prio, tokens)          : (Reach) Base.rplAfter       ((Rch) rTxt, 1, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                   //
 }



}












