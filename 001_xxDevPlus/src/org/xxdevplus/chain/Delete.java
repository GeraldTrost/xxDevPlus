



//** @author  GeTr CopyrightÂ© 1996-2020 Gerald Trost, Klagenfurt, AUSTRIA. No warranties or liabilities whatsoever, not with third parties
//** @license You may use, modify, distribute this code under GNU public dual licence free for NON-Commercial use as long as this notice remains unchanged.
//** @comment Allows delete directly with a Chain's Char-Buffer abd thereby alter firmer Chain Objects as side-effexct

package org.xxdevplus.chain;

import org.xxdevplus.chain.Chain;

public class Delete extends ChnOp
{

  private boolean  pure;

  protected Delete(boolean bufop, Chain Base) { this.bufop = bufop; this.Base = Base; pure = true; }
  protected Delete(boolean bufop, Chain Base, int cnt) { this.bufop = bufop; this.Base = Base; this.cnt = cnt; pure = false; }
// ******************* (Chn other)
  public Chain before      (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Chain) Base.delbefore_     (other)              : (Chain) Base.delbefore      (other)              : (bufop) ? (Chain) Base.delbefore_     (this, other)              : (Chain) Base.delbefore      (this, other); }
  public Chain upto        (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Chain) Base.delupto_       (other)              : (Chain) Base.delupto        (other)              : (bufop) ? (Chain) Base.delupto_       (this, other)              : (Chain) Base.delupto        (this, other); }
  public Chain at          (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Chain) Base.delat_         (other)              : (Chain) Base.delat          (other)              : (bufop) ? (Chain) Base.delat_         (this, other)              : (Chain) Base.delat          (this, other); }
  public Chain from        (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Chain) Base.delfrom_       (other)              : (Chain) Base.delfrom        (other)              : (bufop) ? (Chain) Base.delfrom_       (this, other)              : (Chain) Base.delfrom        (this, other); }
  public Chain after       (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop) ? (Chain) Base.delafter_      (other)              : (Chain) Base.delafter       (other)              : (bufop) ? (Chain) Base.delafter_      (this, other)              : (Chain) Base.delafter       (this, other); }
// ******************* (int pos) //supported: backward index (eInx < 0) where -1 == last Element
  public Chain before      (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (pos)                : (Chain) Base.delbefore      (pos)                : (bufop) ? (Chain) Base.delbefore_     (this, pos)                : (Chain) Base.delbefore      (this, pos); }
  public Chain upto        (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (pos)                : (Chain) Base.delupto        (pos)                : (bufop) ? (Chain) Base.delupto_       (this, pos)                : (Chain) Base.delupto        (this, pos); }
  public Chain at          (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (pos)                : (Chain) Base.delat          (pos)                : (bufop) ? (Chain) Base.delat_         (this, pos)                : (Chain) Base.delat          (this, pos); }
  public Chain from        (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (pos)                : (Chain) Base.delfrom        (pos)                : (bufop) ? (Chain) Base.delfrom_       (this, pos)                : (Chain) Base.delfrom        (this, pos); }
  public Chain after       (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (pos)                : (Chain) Base.delafter       (pos)                : (bufop) ? (Chain) Base.delafter_      (this, pos)                : (Chain) Base.delafter       (this, pos); }
// ******************* (bool match, int occur, String chrs)
  public Chain before      (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (match, occur, chrs) : (Chain) Base.delbefore      (match, occur, chrs) : (bufop) ? (Chain) Base.delbefore_     (this, match, occur, chrs) : (Chain) Base.delbefore      (this, match, occur, chrs); }
  public Chain upto        (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (match, occur, chrs) : (Chain) Base.delupto        (match, occur, chrs) : (bufop) ? (Chain) Base.delupto_       (this, match, occur, chrs) : (Chain) Base.delupto        (this, match, occur, chrs); }
  public Chain at          (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (match, occur, chrs) : (Chain) Base.delat          (match, occur, chrs) : (bufop) ? (Chain) Base.delat_         (this, match, occur, chrs) : (Chain) Base.delat          (this, match, occur, chrs); }
  public Chain from        (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (match, occur, chrs) : (Chain) Base.delfrom        (match, occur, chrs) : (bufop) ? (Chain) Base.delfrom_       (this, match, occur, chrs) : (Chain) Base.delfrom        (this, match, occur, chrs); }
  public Chain after       (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (match, occur, chrs) : (Chain) Base.delafter       (match, occur, chrs) : (bufop) ? (Chain) Base.delafter_      (this, match, occur, chrs) : (Chain) Base.delafter       (this, match, occur, chrs); }
/*                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain before      (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (match, 1, chrs)     : (Chain) Base.delbefore      (match, 1, chrs)     : (bufop) ? (Chain) Base.delbefore_     (this, match, 1, chrs)     : (Chain) Base.delbefore      (this, match, 1, chrs); }
  public Chain upto        (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (match, 1, chrs)     : (Chain) Base.delupto        (match, 1, chrs)     : (bufop) ? (Chain) Base.delupto_       (this, match, 1, chrs)     : (Chain) Base.delupto        (this, match, 1, chrs); }
  public Chain at          (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (match, 1, chrs)     : (Chain) Base.delat          (match, 1, chrs)     : (bufop) ? (Chain) Base.delat_         (this, match, 1, chrs)     : (Chain) Base.delat          (this, match, 1, chrs); }
  public Chain from        (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (match, 1, chrs)     : (Chain) Base.delfrom        (match, 1, chrs)     : (bufop) ? (Chain) Base.delfrom_       (this, match, 1, chrs)     : (Chain) Base.delfrom        (this, match, 1, chrs); }
  public Chain after       (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (match, 1, chrs)     : (Chain) Base.delafter       (match, 1, chrs)     : (bufop) ? (Chain) Base.delafter_      (this, match, 1, chrs)     : (Chain) Base.delafter       (this, match, 1, chrs); }
*/
// ******************* (bool match, int occur, String chrs)
  public Chain Before      (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (match, occur, chrs) : (Chain) Base.delBefore      (match, occur, chrs) : (bufop) ? (Chain) Base.delBefore_     (this, match, occur, chrs) : (Chain) Base.delBefore      (this, match, occur, chrs); }
  public Chain Upto        (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (match, occur, chrs) : (Chain) Base.delUpto        (match, occur, chrs) : (bufop) ? (Chain) Base.delUpto_       (this, match, occur, chrs) : (Chain) Base.delUpto        (this, match, occur, chrs); }
  public Chain At          (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (match, occur, chrs) : (Chain) Base.delAt          (match, occur, chrs) : (bufop) ? (Chain) Base.delAt_         (this, match, occur, chrs) : (Chain) Base.delAt          (this, match, occur, chrs); }
  public Chain From        (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (match, occur, chrs) : (Chain) Base.delFrom        (match, occur, chrs) : (bufop) ? (Chain) Base.delFrom_       (this, match, occur, chrs) : (Chain) Base.delFrom        (this, match, occur, chrs); }
  public Chain After       (boolean  match, int occur, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (match, occur, chrs) : (Chain) Base.delAfter       (match, occur, chrs) : (bufop) ? (Chain) Base.delAfter_      (this, match, occur, chrs) : (Chain) Base.delAfter       (this, match, occur, chrs); }
/*                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain Before      (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (match, 1, chrs)     : (Chain) Base.delBefore      (match, 1, chrs)     : (bufop) ? (Chain) Base.delBefore_     (this, match, 1, chrs)     : (Chain) Base.delBefore      (this, match, 1, chrs); }
  public Chain Upto        (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (match, 1, chrs)     : (Chain) Base.delUpto        (match, 1, chrs)     : (bufop) ? (Chain) Base.delUpto_       (this, match, 1, chrs)     : (Chain) Base.delUpto        (this, match, 1, chrs); }
  public Chain At          (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (match, 1, chrs)     : (Chain) Base.delAt          (match, 1, chrs)     : (bufop) ? (Chain) Base.delAt_         (this, match, 1, chrs)     : (Chain) Base.delAt          (this, match, 1, chrs); }
  public Chain From        (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (match, 1, chrs)     : (Chain) Base.delFrom        (match, 1, chrs)     : (bufop) ? (Chain) Base.delFrom_       (this, match, 1, chrs)     : (Chain) Base.delFrom        (this, match, 1, chrs); }
  public Chain After       (           boolean  match, String chrs)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (match, 1, chrs)     : (Chain) Base.delAfter       (match, 1, chrs)     : (bufop) ? (Chain) Base.delAfter_      (this, match, 1, chrs)     : (Chain) Base.delAfter       (this, match, 1, chrs); }
*/                                                                                                                                                                                                                                                                                                                                                                                             //
// ******************* (int occur, String token)
  public Chain before      (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (occur, token)       : (Chain) Base.delbefore      (occur, token)       : (bufop) ? (Chain) Base.delbefore_     (this, occur, token)       : (Chain) Base.delbefore      (this, occur, token); }
  public Chain upto        (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (occur, token)       : (Chain) Base.delupto        (occur, token)       : (bufop) ? (Chain) Base.delupto_       (this, occur, token)       : (Chain) Base.delupto        (this, occur, token); }
  public Chain at          (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (occur, token)       : (Chain) Base.delat          (occur, token)       : (bufop) ? (Chain) Base.delat_         (this, occur, token)       : (Chain) Base.delat          (this, occur, token); }
  public Chain from        (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (occur, token)       : (Chain) Base.delfrom        (occur, token)       : (bufop) ? (Chain) Base.delfrom_       (this, occur, token)       : (Chain) Base.delfrom        (this, occur, token); }
  public Chain after       (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (occur, token)       : (Chain) Base.delafter       (occur, token)       : (bufop) ? (Chain) Base.delafter_      (this, occur, token)       : (Chain) Base.delafter       (this, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain before      (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (1, token)           : (Chain) Base.delbefore      (1, token)           : (bufop) ? (Chain) Base.delbefore_     (this, 1, token)           : (Chain) Base.delbefore      (this, 1, token); }
  public Chain upto        (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (1, token)           : (Chain) Base.delupto        (1, token)           : (bufop) ? (Chain) Base.delupto_       (this, 1, token)           : (Chain) Base.delupto        (this, 1, token); }
  public Chain at          (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (1, token)           : (Chain) Base.delat          (1, token)           : (bufop) ? (Chain) Base.delat_         (this, 1, token)           : (Chain) Base.delat          (this, 1, token); }
  public Chain from        (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (1, token)           : (Chain) Base.delfrom        (1, token)           : (bufop) ? (Chain) Base.delfrom_       (this, 1, token)           : (Chain) Base.delfrom        (this, 1, token); }
  public Chain after       (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (1, token)           : (Chain) Base.delafter       (1, token)           : (bufop) ? (Chain) Base.delafter_      (this, 1, token)           : (Chain) Base.delafter       (this, 1, token); }
// ******************* (int occur, String token)
  public Chain Before      (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (occur, token)       : (Chain) Base.delBefore      (occur, token)       : (bufop) ? (Chain) Base.delBefore_     (this, occur, token)       : (Chain) Base.delBefore      (this, occur, token); }
  public Chain Upto        (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (occur, token)       : (Chain) Base.delUpto        (occur, token)       : (bufop) ? (Chain) Base.delUpto_       (this, occur, token)       : (Chain) Base.delUpto        (this, occur, token); }
  public Chain At          (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (occur, token)       : (Chain) Base.delAt          (occur, token)       : (bufop) ? (Chain) Base.delAt_         (this, occur, token)       : (Chain) Base.delAt          (this, occur, token); }
  public Chain From        (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (occur, token)       : (Chain) Base.delFrom        (occur, token)       : (bufop) ? (Chain) Base.delFrom_       (this, occur, token)       : (Chain) Base.delFrom        (this, occur, token); }
  public Chain After       (int occur,                 String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (occur, token)       : (Chain) Base.delAfter       (occur, token)       : (bufop) ? (Chain) Base.delAfter_      (this, occur, token)       : (Chain) Base.delAfter       (this, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain Before      (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (1, token)           : (Chain) Base.delBefore      (1, token)           : (bufop) ? (Chain) Base.delBefore_     (this, 1, token)           : (Chain) Base.delBefore      (this, 1, token); }
  public Chain Upto        (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (1, token)           : (Chain) Base.delUpto        (1, token)           : (bufop) ? (Chain) Base.delUpto_       (this, 1, token)           : (Chain) Base.delUpto        (this, 1, token); }
  public Chain At          (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (1, token)           : (Chain) Base.delAt          (1, token)           : (bufop) ? (Chain) Base.delAt_         (this, 1, token)           : (Chain) Base.delAt          (this, 1, token); }
  public Chain From        (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (1, token)           : (Chain) Base.delFrom        (1, token)           : (bufop) ? (Chain) Base.delFrom_       (this, 1, token)           : (Chain) Base.delFrom        (this, 1, token); }
  public Chain After       (                           String token)  throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (1, token)           : (Chain) Base.delAfter       (1, token)           : (bufop) ? (Chain) Base.delAfter_      (this, 1, token)           : (Chain) Base.delAfter       (this, 1, token); }
// ******************* (int occur, bool prio, String... tokens)
  public Chain before      (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (occur, prio, tokens)      : (Chain) Base.delbefore      (occur, prio, tokens)      : (bufop) ? (Chain) Base.delbefore_     (this, occur, prio, tokens)      : (Chain) Base.delbefore      (this, occur, prio, tokens); }
  public Chain upto        (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (occur, prio, tokens)      : (Chain) Base.delupto        (occur, prio, tokens)      : (bufop) ? (Chain) Base.delupto_       (this, occur, prio, tokens)      : (Chain) Base.delupto        (this, occur, prio, tokens); }
  public Chain at          (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (occur, prio, tokens)      : (Chain) Base.delat          (occur, prio, tokens)      : (bufop) ? (Chain) Base.delat_         (this, occur, prio, tokens)      : (Chain) Base.delat          (this, occur, prio, tokens); }
  public Chain from        (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (occur, prio, tokens)      : (Chain) Base.delfrom        (occur, prio, tokens)      : (bufop) ? (Chain) Base.delfrom_       (this, occur, prio, tokens)      : (Chain) Base.delfrom        (this, occur, prio, tokens); }
  public Chain after       (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (occur, prio, tokens)      : (Chain) Base.delafter       (occur, prio, tokens)      : (bufop) ? (Chain) Base.delafter_      (this, occur, prio, tokens)      : (Chain) Base.delafter       (this, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain before      (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delbefore_     (1, prio, tokens)          : (Chain) Base.delbefore      (1, prio, tokens)          : (bufop) ? (Chain) Base.delbefore_     (this, 1, prio, tokens)          : (Chain) Base.delbefore      (this, 1, prio, tokens); }
  public Chain upto        (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delupto_       (1, prio, tokens)          : (Chain) Base.delupto        (1, prio, tokens)          : (bufop) ? (Chain) Base.delupto_       (this, 1, prio, tokens)          : (Chain) Base.delupto        (this, 1, prio, tokens); }
  public Chain at          (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delat_         (1, prio, tokens)          : (Chain) Base.delat          (1, prio, tokens)          : (bufop) ? (Chain) Base.delat_         (this, 1, prio, tokens)          : (Chain) Base.delat          (this, 1, prio, tokens); }
  public Chain from        (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delfrom_       (1, prio, tokens)          : (Chain) Base.delfrom        (1, prio, tokens)          : (bufop) ? (Chain) Base.delfrom_       (this, 1, prio, tokens)          : (Chain) Base.delfrom        (this, 1, prio, tokens); }
  public Chain after       (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delafter_      (1, prio, tokens)          : (Chain) Base.delafter       (1, prio, tokens)          : (bufop) ? (Chain) Base.delafter_      (this, 1, prio, tokens)          : (Chain) Base.delafter       (this, 1, prio, tokens); }
// ******************* (int occur, bool prio, String... tokens)
  public Chain Before      (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (occur, prio, tokens)      : (Chain) Base.delBefore      (occur, prio, tokens)      : (bufop) ? (Chain) Base.delBefore_     (this, occur, prio, tokens)      : (Chain) Base.delBefore      (this, occur, prio, tokens); }
  public Chain Upto        (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (occur, prio, tokens)      : (Chain) Base.delUpto        (occur, prio, tokens)      : (bufop) ? (Chain) Base.delUpto_       (this, occur, prio, tokens)      : (Chain) Base.delUpto        (this, occur, prio, tokens); }
  public Chain At          (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (occur, prio, tokens)      : (Chain) Base.delAt          (occur, prio, tokens)      : (bufop) ? (Chain) Base.delAt_         (this, occur, prio, tokens)      : (Chain) Base.delAt          (this, occur, prio, tokens); }
  public Chain From        (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (occur, prio, tokens)      : (Chain) Base.delFrom        (occur, prio, tokens)      : (bufop) ? (Chain) Base.delFrom_       (this, occur, prio, tokens)      : (Chain) Base.delFrom        (this, occur, prio, tokens); }
  public Chain After       (int occur,            boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (occur, prio, tokens)      : (Chain) Base.delAfter       (occur, prio, tokens)      : (bufop) ? (Chain) Base.delAfter_      (this, occur, prio, tokens)      : (Chain) Base.delAfter       (this, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                             //
  public Chain Before      (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delBefore_     (1, prio, tokens)          : (Chain) Base.delBefore      (1, prio, tokens)          : (bufop) ? (Chain) Base.delBefore_     (this, 1, prio, tokens)          : (Chain) Base.delBefore      (this, 1, prio, tokens); }
  public Chain Upto        (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delUpto_       (1, prio, tokens)          : (Chain) Base.delUpto        (1, prio, tokens)          : (bufop) ? (Chain) Base.delUpto_       (this, 1, prio, tokens)          : (Chain) Base.delUpto        (this, 1, prio, tokens); }
  public Chain At          (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAt_         (1, prio, tokens)          : (Chain) Base.delAt          (1, prio, tokens)          : (bufop) ? (Chain) Base.delAt_         (this, 1, prio, tokens)          : (Chain) Base.delAt          (this, 1, prio, tokens); }
  public Chain From        (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delFrom_       (1, prio, tokens)          : (Chain) Base.delFrom        (1, prio, tokens)          : (bufop) ? (Chain) Base.delFrom_       (this, 1, prio, tokens)          : (Chain) Base.delFrom        (this, 1, prio, tokens); }
  public Chain After       (                      boolean prio, String... tokens)   throws Exception { Base.upd();              return (pure) ? (bufop) ? (Chain) Base.delAfter_      (1, prio, tokens)          : (Chain) Base.delAfter       (1, prio, tokens)          : (bufop) ? (Chain) Base.delAfter_      (this, 1, prio, tokens)          : (Chain) Base.delAfter       (this, 1, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                             //
}





