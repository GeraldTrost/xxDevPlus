


//** @author  GeTr CopyrightÂ© 1996-2020 Gerald Trost, Klagenfurt, AUSTRIA. No warranties or liabilities whatsoever, not with third parties
//** @license You may use, modify, distribute this code under GNU public dual licence free for NON-Commercial use as long as this notice remains unchanged.
//** @comment Allows delete and replace directly with a Chain's Char-Buffer abd thereby alter firmer Chain Objects as side-effexct

package org.xxdevplus.chain;

public class ReplaceWith extends ChnOp
{

  private boolean   pure;

  protected ReplaceWith(boolean  bufop, Chain Base, String txt) { this.bufop = bufop; this.Base = Base; sTxt = txt; pure = true; }
  protected ReplaceWith(boolean  bufop, Chain Base, Chain txt) throws Exception { this.bufop = bufop; this.Base = Base; rTxt = txt; pure = false; rTxt.upd(); }
// ******************* (Chn other)
  public Chain before      (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, other)              : (Chain) Base.rplbefore      (this, other)              : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, other)              : (Chain) Base.rplbefore      ((Chn) rTxt, other); }
  public Chain upto        (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, other)              : (Chain) Base.rplupto        (this, other)              : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, other)              : (Chain) Base.rplupto        ((Chn) rTxt, other); }
  public Chain at          (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop)? (Chain) Base.rplat_         (this, other)              : (Chain) Base.rplat          (this, other)              : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, other)              : (Chain) Base.rplat          ((Chn) rTxt, other); }
  public Chain from        (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, other)              : (Chain) Base.rplfrom        (this, other)              : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, other)              : (Chain) Base.rplfrom        ((Chn) rTxt, other); }
  public Chain after       (Chain other)                              throws Exception { Base.upd(); other.upd(); return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, other)              : (Chain) Base.rplafter       (this, other)              : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, other)              : (Chain) Base.rplafter       ((Chn) rTxt, other); }
// ******************* (int pos) // supports also backwars index (eInx < 0) where -1 == index of last Element
  public Chain before      (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, pos)                : (Chain) Base.rplbefore      (this, pos)                : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, pos)                : (Chain) Base.rplbefore      ((Chn) rTxt, pos); }
  public Chain upto        (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, pos)                : (Chain) Base.rplupto        (this, pos)                : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, pos)                : (Chain) Base.rplupto        ((Chn) rTxt, pos); }
  public Chain at          (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, pos)                : (Chain) Base.rplat          (this, pos)                : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, pos)                : (Chain) Base.rplat          ((Chn) rTxt, pos); }
  public Chain from        (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, pos)                : (Chain) Base.rplfrom        (this, pos)                : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, pos)                : (Chain) Base.rplfrom        ((Chn) rTxt, pos); }
  public Chain after       (int pos)                                  throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, pos)                : (Chain) Base.rplafter       (this, pos)                : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, pos)                : (Chain) Base.rplafter       ((Chn) rTxt, pos); }
// ******************* (bool match, int occur, String chrs) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain before      (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, match, occur, chrs) : (Chain) Base.rplbefore      (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplbefore      ((Chn) rTxt, match, occur, chrs); }
  public Chain upto        (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, match, occur, chrs) : (Chain) Base.rplupto        (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplupto        ((Chn) rTxt, match, occur, chrs); }
  public Chain at          (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, match, occur, chrs) : (Chain) Base.rplat          (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplat          ((Chn) rTxt, match, occur, chrs); }
  public Chain from        (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, match, occur, chrs) : (Chain) Base.rplfrom        (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplfrom        ((Chn) rTxt, match, occur, chrs); }
  public Chain after       (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, match, occur, chrs) : (Chain) Base.rplafter       (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplafter       ((Chn) rTxt, match, occur, chrs); }
/*                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain before      (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, match, 1, chrs)     : (Chain) Base.rplbefore      (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplbefore      ((Chn) rTxt, match, 1, chrs); }
  public Chain upto        (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, match, 1, chrs)     : (Chain) Base.rplupto        (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplupto        ((Chn) rTxt, match, 1, chrs); }
  public Chain at          (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, match, 1, chrs)     : (Chain) Base.rplat          (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplat          ((Chn) rTxt, match, 1, chrs); }
  public Chain from        (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, match, 1, chrs)     : (Chain) Base.rplfrom        (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplfrom        ((Chn) rTxt, match, 1, chrs); }
  public Chain after       (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, match, 1, chrs)     : (Chain) Base.rplafter       (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplafter       ((Chn) rTxt, match, 1, chrs); }
*/
// ******************* (bool match, int occur, String chrs) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain Before      (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, match, occur, chrs) : (Chain) Base.rplBefore      (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplBefore      ((Chn) rTxt, match, occur, chrs); }
  public Chain Upto        (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, match, occur, chrs) : (Chain) Base.rplUpto        (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplUpto        ((Chn) rTxt, match, occur, chrs); }
  public Chain At          (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, match, occur, chrs) : (Chain) Base.rplAt          (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplAt         ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplAt          ((Chn) rTxt, match, occur, chrs); }
  public Chain From        (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, match, occur, chrs) : (Chain) Base.rplFrom        (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplFrom        ((Chn) rTxt, match, occur, chrs); }
  public Chain After       (boolean match, int occur, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, match, occur, chrs) : (Chain) Base.rplAfter       (this, match, occur, chrs) : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, match, occur, chrs) : (Chain) Base.rplAfter       ((Chn) rTxt, match, occur, chrs); }
/*                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain Before      (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, match, 1, chrs)     : (Chain) Base.rplBefore      (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplBefore      ((Chn) rTxt, match, 1, chrs); }
  public Chain Upto        (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, match, 1, chrs)     : (Chain) Base.rplUpto        (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplUpto        ((Chn) rTxt, match, 1, chrs); }
  public Chain At          (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, match, 1, chrs)     : (Chain) Base.rplAt          (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplAt         ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplAt          ((Chn) rTxt, match, 1, chrs); }
  public Chain From        (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, match, 1, chrs)     : (Chain) Base.rplFrom        (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplFrom        ((Chn) rTxt, match, 1, chrs); }
  public Chain After       (           boolean match, String chrs)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, match, 1, chrs)     : (Chain) Base.rplAfter       (this, match, 1, chrs)     : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, match, 1, chrs)     : (Chain) Base.rplAfter       ((Chn) rTxt, match, 1, chrs); }
*/
// ******************* (int occur, String token) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain before      (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, occur, token)      : (Chain) Base.rplbefore      (this, occur, token)      : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, occur, token)      : (Chain) Base.rplbefore      ((Chn) rTxt, occur, token); }
  public Chain upto        (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, occur, token)      : (Chain) Base.rplupto        (this, occur, token)      : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, occur, token)      : (Chain) Base.rplupto        ((Chn) rTxt, occur, token); }
  public Chain at          (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, occur, token)      : (Chain) Base.rplat          (this, occur, token)      : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, occur, token)      : (Chain) Base.rplat          ((Chn) rTxt, occur, token); }
  public Chain from        (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, occur, token)      : (Chain) Base.rplfrom        (this, occur, token)      : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, occur, token)      : (Chain) Base.rplfrom        ((Chn) rTxt, occur, token); }
  public Chain after       (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, occur, token)      : (Chain) Base.rplafter       (this, occur, token)      : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, occur, token)      : (Chain) Base.rplafter       ((Chn) rTxt, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain before      (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, 1, token)          : (Chain) Base.rplbefore      (this, 1, token)          : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, 1, token)          : (Chain) Base.rplbefore      ((Chn) rTxt, 1, token); }
  public Chain upto        (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, 1, token)          : (Chain) Base.rplupto        (this, 1, token)          : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, 1, token)          : (Chain) Base.rplupto        ((Chn) rTxt, 1, token); }
  public Chain at          (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, 1, token)          : (Chain) Base.rplat          (this, 1, token)          : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, 1, token)          : (Chain) Base.rplat          ((Chn) rTxt, 1, token); }
  public Chain from        (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, 1, token)          : (Chain) Base.rplfrom        (this, 1, token)          : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, 1, token)          : (Chain) Base.rplfrom        ((Chn) rTxt, 1, token); }
  public Chain after       (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, 1, token)          : (Chain) Base.rplafter       (this, 1, token)          : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, 1, token)          : (Chain) Base.rplafter       ((Chn) rTxt, 1, token); }
// ******************* (int occur, String token) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain Before      (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, occur, token)      : (Chain) Base.rplBefore      (this, occur, token)      : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, occur, token)      : (Chain) Base.rplBefore      ((Chn) rTxt, occur, token); }
  public Chain Upto        (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, occur, token)      : (Chain) Base.rplUpto        (this, occur, token)      : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, occur, token)      : (Chain) Base.rplUpto        ((Chn) rTxt, occur, token); }
  public Chain At          (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, occur, token)      : (Chain) Base.rplAt          (this, occur, token)      : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, occur, token)      : (Chain) Base.rplAt          ((Chn) rTxt, occur, token); }
  public Chain From        (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, occur, token)      : (Chain) Base.rplFrom        (this, occur, token)      : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, occur, token)      : (Chain) Base.rplFrom        ((Chn) rTxt, occur, token); }
  public Chain After       (int occur,                String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, occur, token)      : (Chain) Base.rplAfter       (this, occur, token)      : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, occur, token)      : (Chain) Base.rplAfter       ((Chn) rTxt, occur, token); }
//                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain Before      (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, 1, token)          : (Chain) Base.rplBefore      (this, 1, token)          : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, 1, token)          : (Chain) Base.rplBefore      ((Chn) rTxt, 1, token); }
  public Chain Upto        (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, 1, token)          : (Chain) Base.rplUpto        (this, 1, token)          : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, 1, token)          : (Chain) Base.rplUpto        ((Chn) rTxt, 1, token); }
  public Chain At          (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, 1, token)          : (Chain) Base.rplAt          (this, 1, token)          : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, 1, token)          : (Chain) Base.rplAt          ((Chn) rTxt, 1, token); }
  public Chain From        (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, 1, token)          : (Chain) Base.rplFrom        (this, 1, token)          : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, 1, token)          : (Chain) Base.rplFrom        ((Chn) rTxt, 1, token); }
  public Chain After       (                          String token)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, 1, token)          : (Chain) Base.rplAfter       (this, 1, token)          : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, 1, token)          : (Chain) Base.rplAfter       ((Chn) rTxt, 1, token); }
// ******************* (int occur, bool prio, String... tokens) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain before      (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, occur, prio, tokens)      : (Chain) Base.rplbefore      (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplbefore      ((Chn) rTxt, occur, prio, tokens); }
  public Chain upto        (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, occur, prio, tokens)      : (Chain) Base.rplupto        (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplupto        ((Chn) rTxt, occur, prio, tokens); }
  public Chain at          (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, occur, prio, tokens)      : (Chain) Base.rplat          (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplat          ((Chn) rTxt, occur, prio, tokens); }
  public Chain from        (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, occur, prio, tokens)      : (Chain) Base.rplfrom        (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplfrom        ((Chn) rTxt, occur, prio, tokens); }
  public Chain after       (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, occur, prio, tokens)      : (Chain) Base.rplafter       (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplafter       ((Chn) rTxt, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain before      (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplbefore_     (this, 1, prio, tokens)          : (Chain) Base.rplbefore      (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplbefore     ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplbefore      ((Chn) rTxt, 1, prio, tokens); }
  public Chain upto        (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplupto_       (this, 1, prio, tokens)          : (Chain) Base.rplupto        (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplupto       ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplupto        ((Chn) rTxt, 1, prio, tokens); }
  public Chain at          (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplat_         (this, 1, prio, tokens)          : (Chain) Base.rplat          (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplat         ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplat          ((Chn) rTxt, 1, prio, tokens); }
  public Chain from        (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplfrom_       (this, 1, prio, tokens)          : (Chain) Base.rplfrom        (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplfrom       ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplfrom        ((Chn) rTxt, 1, prio, tokens); }
  public Chain after       (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplafter_      (this, 1, prio, tokens)          : (Chain) Base.rplafter       (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplafter      ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplafter       ((Chn) rTxt, 1, prio, tokens); }
// ******************* (int occur, bool prio, String... tokens) // supports also backwars occurence (occur < 0) where -1 == the last occurence
  public Chain Before      (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, occur, prio, tokens)      : (Chain) Base.rplBefore      (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplBefore      ((Chn) rTxt, occur, prio, tokens); }
  public Chain Upto        (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, occur, prio, tokens)      : (Chain) Base.rplUpto        (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplUpto        ((Chn) rTxt, occur, prio, tokens); }
  public Chain At          (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, occur, prio, tokens)      : (Chain) Base.rplAt          (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplAt          ((Chn) rTxt, occur, prio, tokens); }
  public Chain From        (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, occur, prio, tokens)      : (Chain) Base.rplFrom        (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplFrom        ((Chn) rTxt, occur, prio, tokens); }
  public Chain After       (int occur,           boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, occur, prio, tokens)      : (Chain) Base.rplAfter       (this, occur, prio, tokens)      : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, occur, prio, tokens)      : (Chain) Base.rplAfter       ((Chn) rTxt, occur, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                            //
  public Chain Before      (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplBefore_     (this, 1, prio, tokens)          : (Chain) Base.rplBefore      (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplBefore     ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplBefore      ((Chn) rTxt, 1, prio, tokens); }
  public Chain Upto        (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplUpto_       (this, 1, prio, tokens)          : (Chain) Base.rplUpto        (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplUpto        ((Chn) rTxt, 1, prio, tokens); }
  public Chain At          (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAt_         (this, 1, prio, tokens)          : (Chain) Base.rplAt          (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplUpto       ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplAt          ((Chn) rTxt, 1, prio, tokens); }
  public Chain From        (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplFrom_       (this, 1, prio, tokens)          : (Chain) Base.rplFrom        (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplFrom       ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplFrom        ((Chn) rTxt, 1, prio, tokens); }
  public Chain After       (                     boolean prio, String... tokens)    throws Exception { Base.upd();              return (pure) ? (bufop)? (Chain) Base.rplAfter_      (this, 1, prio, tokens)          : (Chain) Base.rplAfter       (this, 1, prio, tokens)          : (bufop) ? (Chain) Base.rplAfter      ((Chn) rTxt, 1, prio, tokens)          : (Chain) Base.rplAfter       ((Chn) rTxt, 1, prio, tokens); }
//                                                                                                                                                                                                                                                                                                                                                                                                                            //
}









